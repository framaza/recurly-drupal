<?php

/**
 * @file
 * Uses Recurly's PHP client library to interact with their API and integrate it
 * with Drupal user accounts.
 */


/**
 * Implements hook_menu().
 */
function recurly_menu() {
  $items = array();

  // Define an always accessible push notification listener menu item.
  $items['recurly/listener/%'] = array(
    'page callback' => 'recurly_process_push_notification',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['recurly/listener/%/%'] = array(
    'page callback' => 'recurly_process_push_notification',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Define administrative menu items.
  $items['admin/config/services/recurly'] = array(
    'title' => 'Recurly',
    'description' => 'Configure your Recurly API settings and points of integration with Drupal.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recurly_settings_form'),
    'access arguments' => array('administer recurly'),
    'file' => 'includes/recurly.admin.inc',
  );
  $items['admin/config/services/recurly/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure your Recurly API settings and points of integration with Drupal.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/services/recurly/subscription-plans'] = array(
    'title' => 'Subscription plans',
    'description' => 'View a list of subscription plans defined in your Recurly account.',
    'page callback' => 'recurly_subscription_plans_overview',
    'access arguments' => array('administer recurly'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'file' => 'includes/recurly.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function recurly_permission() {
  $permissions = array(
    'administer recurly' => array(
      'title' => t('Administer Recurly'),
      'description' => t('Allows users to configure site-wide Recurly account settings and grants access to all integration activities.'),
      'restrict access' => TRUE,
    ),
    'edit subscription plans' => array(
      'title' => t('Edit subscription plans'),
      'description' => t('Determines whether or not the user should see links to edit subscription plans at Recurly. Grants of this permission should coordinate with user permissions at Recurly.'),
      'restrict access' => TRUE,
    ),
    'view all recurly accounts' => array(
      'title' => t('View all Recurly accounts'),
      'description' => t('Allows users to view the Recurly account information linked to any user on the site.'),
      'restrict access' => TRUE,
    ),
    'edit all recurly accounts' => array(
      'title' => t('Edit all Recurly accounts'),
      'description' => t('Determines whether or not the user should see links to edit accounts in the Recurly administrative interface. Grants of this permission should coordinate with user permissions at Recurly.'),
      'restrict access' => TRUE,
    ),
    'view own recurly account' => array(
      'title' => t('View own Recurly account'),
      'description' => t('Allows users to view Recurly account information linked to their user accounts.'),
    ),
    'edit own recurly account' => array(
      'title' => t('Edit own Recurly account'),
      'description' => t('Determines whether or not users should see links to edit their own account information on the hosted account management page at Recurly.'),
    ),
    'edit own recurly account without login' => array(
      'title' => t('Edit own Recurly account without login'),
      'description' => t('Gives users direct edit links for their Recurly accounts if available that bypasses the normal login process on the hosted account management page.'),
    )
  );

  return $permissions;
}

/**
 * Implements hook_help().
 */
function recurly_help($path, $arg) {
  switch ($path) {
    case 'admin/config/services/recurly/subscription-plans':
      return '<p>' . t('The subscription plans below are defined for the Recurly account configured in your default account settings. Plans should be defined and updated at Recurly and are cached here for informational purposes only. Edit links and purchase links that may appear in the table redirect to Recurly.') . '</p>';
  }
}

/**
 * Implements hook_user_view().
 *
 * If enabled, adds Recurly account information and management links to user
 * profiles linked to accounts.
 */
function recurly_user_view($account, $view_mode, $langcode) {
  global $user;

  // If account display on user profiles is enabled, this is an authenticated
  // account, and the current user has access to view its account information...
  if (recurly_integration_option_enabled('account', 'profile_display') &&
    $account->uid &&
    recurly_account_access('view', $account)) {
    // Initialize the Recurly client.
    recurly_client_initialize();

    // If the account is linked to a Recurly account...
    if ($recurly_account = recurly_account_load(array('uid' => $account->uid))) {
      // Add it to the content array.
      $account->content['recurly_account'] = array(
        '#type' => 'user_profile_category',
        '#title' => t('Subscription information'),
        '#weight' => 0,
      );

      // Build an account holder string based on available data.
      if (empty($recurly_account->company_name)) {
        $account_holder = t('@first_name @last_name', array('@first_name' => $recurly_account->first_name, '@last_name' => $recurly_account->last_name));
      }
      else {
        $account_holder = t('@first_name @last_name, @company_name', array('@first_name' => $recurly_account->first_name, '@last_name' => $recurly_account->last_name, '@company_name' => $recurly_account->company_name));
      }

      $account->content['recurly_account']['account_holder'] = array(
        '#type' => 'user_profile_item',
        '#title' => t('Account holder'),
        '#markup' => $account_holder,
      );

      // Add the account e-mail address if available.
      if (!empty($recurly_account->email)) {
        $account->content['recurly_account']['account_email'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Account e-mail address'),
          '#markup' => check_plain($recurly_account->email),
        );
      }

      // Tell the user if the account is closed.
      if ((empty($recurly_account->state) && $recurly_account->status == 'closed') ||
        (!empty($recurly_account->state) && $recurly_account->state == 'closed')) {
        $account->content['recurly_account']['account_closed'] = array(
          '#type' => 'user_profile_item',
          '#title' => t('Account status'),
          '#markup' => t('Our records indicate your account is closed. We are not currently billing your for any subscriptions.'),
        );
      }

      // Add an appropriate account edit link if the user has access.
      if (recurly_account_access('edit', $account)) {
        // Give administrators a link to the back end.
        if (user_access('administer recurly') || user_access('edit all recurly accounts')) {
          $account->content['recurly_account']['edit_account_link'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Administer account'),
            '#markup' => l(t('Edit this account at Recurly.'), recurly_account_edit_url($recurly_account)),
          );
        }

        // If Hosted Payment Pages are enabled, give users a link to their own
        // account management page if their account is active.
        if (variable_get('recurly_hosted_payment_pages', FALSE) &&
          $user->uid == $account->uid &&
          $recurly_account->state == 'active') {
          // Give users manage links for their own accounts.
          $account->content['recurly_account']['manage_account_link'] = array(
            '#type' => 'user_profile_item',
            '#title' => t('Manage account'),
            '#markup' => l(t('Update your subscription and billing information at Recurly.'), recurly_account_manage_url($recurly_account, user_access('edit own recurly account without login'))),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_filter_info().
 */
function recurly_filter_info() {
  $filters = array();

  $filters['recurly_subscription_plan_tokens'] = array(
    'title' => t('Token replacement for Recurly subscription plans'),
    'description' => t('Converts tokens to URLs and submit buttons redirecting to Recurly Hosted Payment Pages for subscription plans using the default account settings.'),
    'tips callback' => 'recurly_filter_recurly_subscription_plan_tokens_tips',
    'process callback' => 'recurly_filter_recurly_subscription_plan_tokens_process',
    'cache' => FALSE,
  );

  return $filters;
}

/**
 * Tips callback: provides help for using Recurly subscription plan tokens.
 */
function recurly_filter_recurly_subscription_plan_tokens_tips($filter, $format, $long) {
  if ($long) {
    return t('Recurly subscription plan tokens using the format [recurly-subscribe-url:<em>code</em>] and [recurly-subscribe-button:<em>code</em>] will be converted to URLs and buttons respectively. Replace <em>code</em> with a valid subscription plan code for your default Recurly account.');
  }
  else {
    return t('Recurly subscription plan tokens will be converted to URLs / submit buttons.');
  }
}

/**
 * Process callback: replaces Recurly subscription link and submit button tokens.
 */
function recurly_filter_recurly_subscription_plan_tokens_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  // If the default account support Hosted Payment Pages and we detect the
  // presence of what appears to be a valid token...
  if (variable_get('recurly_hosted_payment_pages', FALSE) &&
    strpos($text, '[recurly-subscribe-') !== FALSE) {
    // Initialize the Recurly client with the default account.
    recurly_client_initialize();

    // Perform the token replacement using a callback that properly returns a
    // URL or a rendered form.
    $text = preg_replace_callback('/\[recurly-subscribe-(url|button):[A-Za-z0-9_\-\+]+\]/', '_recurly_filter_recurly_subscription_plan_tokens_process', $text);
  }

  return $text;
}

/**
 * Returns the replacement for a token match to preg_replace_callback().
 */
function _recurly_filter_recurly_subscription_plan_tokens_process($matches) {
  $plan = new stdClass;

  // Extract the code from the token into a pseudo subscription plan object. We
  // use the pseudo object to avoid the lag from attempting to load the whole
  // object.
  list(, $plan->plan_code) = explode(':', trim($matches[0], '[]'));

  // Return the appropriate replacement based on the type of token.
  switch ($matches[1]) {
    case 'url':
      return recurly_subscription_plan_purchase_url($plan);

    case 'button':
      return drupal_render(drupal_get_form('recurly_subscription_plan_purchase_redirect_form', $plan));
  }
}

/**
 * Determines whether or not the specified point of integration is enabled.
 *
 * @param $integration
 *   The type of integration option to check from the following:
 *   - account: integration with Recurly accounts
 * @param $option
 *   The name of the option to check to see if it's enabled based on the type of
 *   integration, including:
 *   - account:
 *     - profile_display: show Recurly account information on user profiles
 *
 * @return
 *   Boolean indicating whether or not the point of integration is enabled.
 */
function recurly_integration_option_enabled($integration, $option) {
  $options = variable_get('recurly_' . $integration . '_integration', array());
  return !empty($options[$option]);
}

/**
 * Processes an incoming push notification.
 *
 * Push notifications are configured at Recurly, where you can setup the URL
 * that listens for notifications and an HTTP username and password to use for
 * basic authentication. When a notification is received, this function will
 * perform some optional processing immediately if it is determined the received
 * notification is from the default account.
 *
 * Other modules can react to incoming push notifications by implementing
 * hook_recurly_process_push_notification(). The hook receives the subdomain as
 * received in the listener URL; implementations can discern from this what
 * Recurly account sent the notification, with a NULL value or the default
 * account subdomain indicating the site's default account generated the push
 * notification. If the notification was not from the default account, the
 * implementations -must- perform their own authentication and parsing of the
 * POST XML. If the notification was from the default account, it will have
 * already passed HTTP basic authentication, and the hook implementation will
 * received an already parsed notification object.
 *
 * @param $subdomain
 *   If specified, this is the subdomain of the Recurly account that sent the
 *   push notification; defaults to NULL indicating it is the default account as
 *   configured in the Recurly settings.
 */
function recurly_process_push_notification($key, $subdomain = NULL) {
  $notification = NULL;

  // If no subdomain was derived from the URL or the default account subdomain
  // was specified...
  if (empty($subdomain) || $subdomain == variable_get('recurly_subdomain', '')) {
    // Ensure the push notification was sent to the proper URL.
    if ($key != variable_get('recurly_listener_key', '')) {
      // Log the failed attempt and bail.
      watchdog('recurly', 'Incoming push notification did not contain the proper URL key.', array(), WATCHDOG_WARNING);
      return;
    }

    // Initialize the Recurly client with the default account settings.
    recurly_client_initialize();

    // Retrieve the POST XML and create a notification object from it.
    $post_xml = file_get_contents('php://input');
    $notification = new RecurlyPushNotification($post_xml);

    // Bail if this is an empty or invalid notification.
    if (empty($notification) || empty($notification->type)) {
      return;
    }

    // Log the incoming push notification if enabled.
    if (variable_get('recurly_push_logging', FALSE)) {
      watchdog('recurly', 'Incoming @type push notification: !notification', array('@type' => $notification->type, '!notification' => '<pre>' . check_plain(print_r($notification, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }

    // If push synchronization is enabled for account data and the incoming
    // notification is an account update...
    if ((recurly_integration_option_enabled('account', 'push_create') || recurly_integration_option_enabled('account', 'push_update')) &&
      in_array($notification->type, array('new_account_notification', 'canceled_account_notification', 'billing_info_updated_notification'))) {
      // Retrieve the full account record from Recurly.
      $recurly_account = RecurlyAccount::getAccount($notification->account->account_code);

      // If we couldn't get anything, just attempt to use the submitted data.
      if (empty($recurly_account)) {
        $recurly_account = $notification->account;
      }

      // Look for a pre-existing local record.
      $local_account = recurly_account_load(array('account_code' => $recurly_account->account_code), TRUE);

      // If no local record exists and we've specified to create it...
      if (empty($local_account) && recurly_integration_option_enabled('account', 'push_create')) {
        $uid = 0;

        // Attempt to find a matching user account.
        if ($user = user_load_by_mail($recurly_account->email)) {
          $uid = $user->uid;
        }

        // Save the local record now.
        recurly_account_save($recurly_account, $uid);
      }
      elseif(!empty($local_account) && recurly_integration_option_enabled('account', 'push_update')) {
        // Otherwise if a local record was found and we want to keep it
        // synchronized, save it afresh now, preserving any existing data array.
        recurly_account_save($recurly_account, $local_account->uid, $local_account->data);
      }
    }
  }

  module_invoke_all('recurly_process_push_notification', $subdomain, $notification);
}

/**
 * Initializes the Recurly API client with a given set of account settings.
 *
 * @param $settings
 *   An array of Recurly account settings including the following keys or NULL
 *   to use the site-wide account settings.
 *   - apiKey: the API key to use
 *   - privateKey: the private Key to use for Recurly.js (optional)
 *   - subdomain: the subdomain configured for your Recurly account.
 *   - environment: the current environment of the given account, either
 *     'sandbox' or 'production'.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the client was initialized with the
 *   specified account settings.
 */
function recurly_client_initialize($settings = NULL) {
  $client = NULL;

  // If no settings array was given, use the default account settings.
  if (empty($settings)) {
    $settings = array(
      'apiKey' => variable_get('recurly_api_key', ''),
      'privateKey' => variable_get('recurly_private_key', ''),
      'subdomain' => variable_get('recurly_subdomain', ''),
      'environment' => variable_get('recurly_environment', 'sandbox'),
    );
  }

  // If we can find a path in the libraries directory to the Recurly PHP client
  // library...
  if (($path = libraries_get_path('recurly')) && file_exists($path . '/lib/recurly.php')) {
    // Include the library files and configure authentication.
    require_once $path . '/lib/recurly.php';
    // Required for the API
	Recurly_Client::$apiKey = $settings['apiKey'];

	// Optional for Recurly.js:
	Recurly_js::$privateKey = $settings['privateKey'];
  }
  else {
    watchdog('recurly', 'Could not find the Recurly PHP client library in sites/all/libraries/recurly.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  return TRUE;
}

/**
 * Determines whether or not the given account has access to perform the
 * requested operation on the target account's Recurly account information.
 *
 * @param $op
 *   The operation to perform on the Recurly account; 'view' or 'edit'.
 * @param $target_account
 *   The Drupal user account whose Recurly account information would be
 *   operated on.
 * @param $account
 *   The Drupal user account performing the operation; defaults to the current
 *   user.
 *
 * @return
 */
function recurly_account_access($op, $target_account, $account = NULL) {
  global $user;

  // Initialize the account to the current user if it's empty.
  if (empty($account)) {
    $account = clone($user);
  }

  // Allow administrators to perform any operation.
  if (user_access('administer recurly', $account)) {
    return TRUE;
  }

  // Allow users with access to view or edit all accounts to perform operations.
  if (user_access($op . ' all recurly accounts', $account)) {
    return TRUE;
  }

  // Allow users with access to view or edit their own accounts.
  if (user_access($op . ' own recurly account') && $account->uid == $target_account->uid) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Loads a Recurly account record based on the given conditions.
 *
 * @param $conditions
 *   An associative array of values to look for in the conditions of the query;
 *   normally used to look-up on account_code or uid.
 * @param $local
 *   Boolean indicating whether or not to only return local data; defaults to
 *   FALSE, meaning it will attempt to load the full linked account object.
 *
 * @return
 *   The fully loaded account object from Recurly if possible. If Recurly cannot
 *   be accessed, just returns an object representing the data stored locally.
 *   If the account no longer exists at Recurly, the returned object will
 *   include an additional 'orphaned' property set to TRUE. Returns FALSE if no
 *   data can be found locally at all.
 */
function recurly_account_load($conditions = array(), $local = FALSE) {
  // Create a base select query object.
  $query = db_select('recurly_account', 'ra')->fields('ra');

  // Add conditions to it based on the passed array.
  foreach ($conditions as $key => $value) {
    $query->condition($key, $value);
  }

  // Retrieve data if available.
  $data = $query->execute()->fetchObject();

  // Bail now if no data was returned.
  if (empty($data)) {
    return FALSE;
  }

  // Unserialize the data array.
  $data->data = unserialize($data->data);

  // If we only want local data, return it now.
  if ($local) {
    return $data;
  }

  // Attempt to load the full account from Recurly.
  try {
    $recurly_account = Recurly_Account::get($data->account_code);

    // Return the orphaned data if no account was found at Recurly.
    if (empty($recurly_account)) {
      $data->orphaned = TRUE;
      return $data;
    }

    // If any data has changed remotely, update it locally now.
    if ($recurly_account->first_name != $data->first_name ||
      $recurly_account->last_name != $data->last_name ||
      $recurly_account->company_name != $data->company_name ||
      $recurly_account->email != $data->email ||
      $recurly_account->state != $data->status) {
      recurly_account_save($recurly_account, $data->uid);
    }
  }
  catch (Exception $e) {
    return $data;
  }

  return $recurly_account;
}

/**
 * Saves an account record, optionally exporting the saved data to Recurly as a
 * new account or update request as necessary.
 *
 * @param $recurly_account
 *   The Recurly account object to save.
 * @param $uid
 *   The Drupal user ID the account is associated with.
 * @param $data
 *   An array of data to store with the local record.
 * @param $export
 *   Boolean indicating whether or not the saved account information should also
 *   be exported to Recurly by either creating a new account or updating an
 *   existing account based on the saved values using the Recurly API.
 *
 * @return
 *   FALSE on failure of either the local save or optional export or
 *   STATUS_INSERT or STATUS_UPDATE indicating the type of query performed to
 *   save the account information locally.
 */
function recurly_account_save($recurly_account, $uid, $data = array(), $export = FALSE) {
  // First attempt to save the data at Recurly if specified. Failing an export
  // will prevent local data from being saved so you don't end up with a local
  // record that does not match a record at Recurly.
  if ($export) {
    // Check to see if the record already exists.
    $remote_account = Recurly_Account::get($recurly_account->account_code);

    // If it does, then update the account.
    if (!empty($remote_account)) {
      try {
        $recurly_account->update();
      }
      catch (Exception $e) {
        return FALSE;
      }
    }
    else {
      // Otherwise create it at Recurly now.
      try {
        $recurly_account->create();
      }
      catch (Exception $e) {
        return FALSE;
      }
    }
  }

  // Generate an array of data to save.
  $fields = array(
    'email' => $recurly_account->email,
    'first_name' => $recurly_account->first_name,
    'last_name' => $recurly_account->last_name,
    'company_name' => $recurly_account->company_name,
    'uid' => $uid,
    'updated' => REQUEST_TIME,
    'data' => serialize($data),
  );

  // Add the status based on whatever data we have available.
  if (!empty($recurly_account->state)) {
    $fields['status'] = $recurly_account->state;
  }
  elseif (!empty($recurly_account->status)) {
    $fields['status'] = $recurly_account->status;
  }
  else {
    $fields['status'] = 'active';
  }

  // Execute a merge query that will either insert a new record or update an
  // existing record accordingly.
  return db_merge('recurly_account')
    ->key(array('account_code' => $recurly_account->account_code))
    ->fields($fields)
    ->execute();
}

/**
 * Returns an array of subscription plan objects for the current account,
 * retrieving them from a local cache if possible.
 *
 * @param $reset_cache
 *   Boolean indicating whether or not to reset the subscription plan cache when
 *   retrieving plans.
 *
 * @return
 *   An array of subscription plan objects.
 */
function recurly_subscription_plans($reset_cache = FALSE) {
  // If we haven't specified a cache reset, attempt to retrieve plans from the
  // cache before getting them from Recurly.
  if (!$reset_cache) {
    $plans = cache_get('recurly-subscription-plans:' . Recurly_Client::$apiKey);

    // If plans were found, return them now.
    if (!empty($plans->data)) {
      return $plans->data;
    }
  }

  // Retrieve the subscription plans from Recurly.
  $plans = Recurly_PlanList::get();

  // If data was actually returned, cache it for the current subdomain.
  if (!empty($plans)) {
    cache_set('recurly-subscription-plans:' . Recurly_Client::$apiKey, $plans, 'cache', CACHE_TEMPORARY);
  }

  return $plans;
}

/**
 * Returns the base Recurly URL for the current account with an optional path
 * appended to it.
 */
function recurly_url($path = '') {
  // Generate the subdomain to use for the current account.
  $subdomain = variable_get('recurly_subdomain', '');

  return url('https://' . $subdomain . '.recurly.com/' . $path);
}

/**
 * Returns an edit URL for a Recurly account.
 *
 * @param $recurly_account
 *   The account object returned by the Recurly client.
 *
 * @return
 *   The URL for the plan's edit page at Recurly.
 */
function recurly_account_edit_url($recurly_account) {
  return recurly_url('accounts/' . $recurly_account->account_code);
}

/**
 * Returns a front end management URL for a Recurly account.
 *
 * @param $recurly_account
 *   The account object returned by the Recurly client.
 * @param $hosted_login_token
 *   Boolean indicating whether or not to use the hosted login token in the URL
 *   if it's available in the account object; defaults to FALSE.
 *
 * @return
 *   The URL for the account's front end management page at Recurly; uses the
 *   hosted login token if specified and it's available.
 */
function recurly_account_manage_url($recurly_account, $hosted_login_token = FALSE) {
  // Return a URL using the hosted login token if available.
  if ($hosted_login_token && !empty($recurly_account->hosted_login_token)) {
    return recurly_url('account/' . $recurly_account->hosted_login_token);
  }

  return recurly_url('account');
}

/**
 * Returns an edit URL for a subscription plan.
 *
 * @param $plan
 *   The subscription plan object returned by the Recurly client.
 *
 * @return
 *   The URL for the plan's edit page at Recurly.
 */
function recurly_subscription_plan_edit_url($plan) {
  return recurly_url('company/plans/' . $plan->plan_code);
}

/**
 * Returns a Hosted Payment Page URL for the given subscription plan.
 *
 * @param $plan
 *   The subscription plan object returned by the Recurly client.
 * @param $settings
 *   An optional array of settings used to pre-populate the payment form.
 *   - first_name: the customer's first name
 *   - last_name: the customer's last name
 *   - email: the customer's e-mail address
 *
 * @return
 *   The URL for the plan's Hosted Payment Page at Recurly.
 */
function recurly_subscription_plan_purchase_url($plan, $settings = NULL) {
  $query = '';

  if (!empty($settings)) {
    $query = '?' . drupal_http_build_query($settings);
  }

  return recurly_url('subscribe/' . $plan->plan_code . $query);
}

/**
 * Returns a form with a submit button that redirects the user to the Hosted
 * Payment Page for the given plan.
 *
 * @param $plan
 *   A subscription plan object that contains at least a valid plan code.
 */
function recurly_subscription_plan_purchase_redirect_form($form, &$form_state, $plan) {
  $form['plan'] = array(
    '#type' => 'value',
    '#value' => $plan,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subscribe'),
  );

  return $form;
}

/**
 * Submit callback: redirect the user to the specified Hosted Payment Page.
 */
function recurly_subscription_plan_purchase_redirect_form_submit($form, &$form_state) {
  $form_state['redirect'] = recurly_subscription_plan_purchase_url($form_state['values']['plan']);
}
